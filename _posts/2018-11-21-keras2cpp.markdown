---
layout: post
title:  "Как я Keras на C++ запускал"
date:   2018-11-21
category: neural-network
---

<p class="intro"><span class="dropcap">Н</span>е так давно передо мной встала производственная задача – запустить обученную модель нейронной сети <code>Kesas</code> на нативном <code>C++</code> коде. Как ни странно, решение оказалось вообще не тривиальным. В результате чего появилась собственная библиотека, дающая такую возможность. О том, как же это – нейросети на чистых крестах и будет сегодняшняя небольшая статья.</p>

Тем, кому не терпится – вот [тут](https://github.com/gosha20777/keras2cpp) репозитарий на github, с подробным описанием использования. Ну а всех остальных прошу под кат…

### Постановка проблемы.

В процессе работы мне понадобилась запустить обученную модель на `C++` приложении *(Unreal Engune 4)*. Но вот незадача: на сегодняшний день нет практически никакой возможности запустить модель Keras на C++.
Вариант с вызовом `Python` из `C++` не представлялся мне хорошим. Еще одним вариантом было конвертация модели Keras в модель **TensorFlow** и потом *сборка TensoFflow под кресты* и вызов API TF уже из C++ кода.
Сей процесс метаморфозов хорошо описан в [этой статье](http://bitbionic.com/2017/08/18/run-your-keras-models-in-c-tensorflow/). Но с этим также возникают трудности. **Во-первых**, TensorFlow собирается через `Bzzel`. А сам безель штука капризная и отказался собираться под *UE4*. **Во-вторых**, сам `TF` довольно *большая и громоздкая* штуковина, а мне хотелось чего-то более легкого и производительного. Могу лишь сказать, что на просторах github был найден [полупабочий проект](https://github.com/pplonski/keras2cpp), с нужным мне функционалом. Но, он не поддерживал актуальные версии `Python` и `Keras`. А попытки переделать его, не увенчались успехом: *С++ приложение валилась с ошибкой `Core Dump`*. Было принято писать свою реализацию…

### Пишем свою библиотеку!

Включив рок потяжелее, закинувшись бутылкой ~~пиваса~~ энергетика, я сел за код. Во многом в реализации этой библиотеки мне помог код TensorFlow, попытки реабилитации найденного на `гит` кода, некоторые знания об алгоритмах и структурах данных *(спасибо ИТМО за его курсы)* и хорошая музыка в ушах. Так или иначе библиотека была написана за одну ночь.

**И так встречайте: Keras2cpp!**

Первая чать библиотеки – это *Python* модуль для сохранения обученной модели в собственный *бинарный* формат.

Ничего сложного в этой операции нет. Мы просто читаем модель `Keras` и записываем побитово в файл: сначала `тип слоя`, потом `размерность`, потом `матрицу весов` в формате `float`.

Теперь перейдем к самому вкусному – C++ реализации.

Пользователю доступны 2 сущности `tensor` и `model`. 

**Tensor** – *переделяет собой данные с которыми работает нейросеть и является компьютерной реализацией тензора.* На данный момент поддерживается максимальная размерность в **4** измерения. *Размерность* каждого измерения хранится в поле `std::vector<int> dims_;` а *вес* каждого элемента тензора – в `std::vector<int> data_;`. Из доступных методов можно выделить `void Print()` и `Tensor Select(int row)`. Остальные операции вы можете посмотреть в исходном коде. После того как математика для тензоров была написана я приступил к реализации моделей.

**Model** – *представляет собой набор слоев в каждом из которых прописаны операции над тензорами и матрица весов.* Для пользователя доступны 2 функции `virtual bool LoadModel(const std::string& filename);` и `virtual bool Apply(Tensor* in, Tensor* out);`.

Вот полный пример кода.

*python_model.py:*

{% highlight python %}
import numpy as np
from keras import Sequential
from keras.layers import Dense

#create random data
test_x = np.random.rand(10, 10).astype('f')
test_y = np.random.rand(10).astype('f')
model = Sequential([
    Dense(1, input_dim=10)
])
model.compile(loss='mse', optimizer='adam')

#train model by 1 iteration
model.fit(test_x, test_y, epochs=1, verbose=False)

#predict
data = np.array([[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]])
prediction = model.predict(data)
print(prediction)

#save model
from keras2cpp import export_model
export_model(model, 'example.model')
{% endhighlight %}

*cpp_mpdel.cc:*

{% highlight cpp %}
#include "keras_model.h"

int main() 
{
    // Initialize model.
    KerasModel model;
    model.LoadModel("example.model");

    // Create a 1D Tensor on length 10 for input data.
    Tensor in(10);
    in.data_ = {{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}};

    // Run prediction.
    Tensor out;
    model.Apply(&in, &out);
    out.Print();
    return 0;
}
{% endhighlight %}

На этом я думаю все. Приятного использования, а я пойду к любимому C# и Python писать нейросети дальше.

### P.s.

Мне понравилось писать эту библиотеку. Когда пишешь все сам с нуля – больше понимаешь, а как оно работает… В планах добавить поддержку других архитектур и GPU…